// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  uid           String          @unique//from firebase
  name          String?
  email         String          @unique
  password      String
  phone         String          @unique
  emailVerified DateTime?
  image         String?
  trialAvailable      Boolean     @default(true)
  accounts      Account[]
  sessions      Session[]

  subscription    Subscription?
  payments        Payments[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Subscription {
  sid        Int       @id @default(autoincrement())
  subType    SubType
  startDate  DateTime?
  endDate    DateTime?
  activated   Boolean   @default(false)

  userId     String     @unique // ensure one subscription per user
  user       User       @relation(fields: [userId], references: [id])
}

model Payments {
  order_id         String   @id // Cashfree's order_id
  order_amount     Int

  cf_payment_id    String   @unique 
  payment_status   String
  payment_time     DateTime

  customer_id      String
  payment_message  String?     // helpful for failed payments

  user             User     @relation(fields: [customer_id], references: [id])
}

enum SubType {
  monthly
  quaterly
  trial
}



 

